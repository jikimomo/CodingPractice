import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	static int n;
	static int[][] map;
	static int result = 0;
	
	public static void dfs(int x1, int y1, int x2, int y2) {
		if(x2 == (n-1) && y2 == (n-1)) {
			result++;
			return;
		}
		if((x2-x1)==0 && (y2-y1)==1) { //가로
			if(x2<n && y2+1<n && map[x2][y2+1] != 1)
				dfs(x2, y2, x2, y2+1);
			if(x2+1<n && y2+1<n && map[x2+1][y2+1] != 1 && map[x2][y2+1]!=1 && map[x2+1][y2]!=1)
				dfs(x2, y2, x2+1, y2+1);
		}
		else if((x2-x1)==1 && (y2-y1)==0) { //세로
			if(x2+1<n && y2<n && map[x2+1][y2] != 1)
				dfs(x2, y2, x2+1, y2);
			if(x2+1<n && y2+1<n && map[x2+1][y2+1] != 1 && map[x2][y2+1]!=1 && map[x2+1][y2]!=1)
				dfs(x2, y2, x2+1, y2+1);
		}
		else if((x2-x1)==1 && (y2-y1)==1) { //대각선
			if(x2<n && y2+1<n && map[x2][y2+1] != 1)
				dfs(x2, y2, x2, y2+1);
			if(x2+1<n && y2<n && map[x2+1][y2] != 1)
				dfs(x2, y2, x2+1, y2);
			if(x2+1<n && y2+1<n && map[x2+1][y2+1] != 1 && map[x2][y2+1]!=1 && map[x2+1][y2]!=1)
				dfs(x2, y2, x2+1, y2+1);
		}
	}
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		n = Integer.parseInt(br.readLine());
		map = new int[n][n];
		for(int i=0; i<n; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0; j<n; j++)
				map[i][j] = Integer.parseInt(st.nextToken());
		}
		
		dfs(0, 0, 0, 1);
		System.out.println(result);
	}
}
