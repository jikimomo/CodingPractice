import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	static int k, min = Integer.MAX_VALUE;
	static int[] count;
	
	public static void dfs(int n) {
		Queue<Integer> queue = new LinkedList<>();
		queue.add(n);
		count[n] = 1; //방문여부를 확인하기 위해 일단 1부터 시작
		
		while(!queue.isEmpty()) {
			int num = queue.remove();
			if(num == k) {
				min = Math.min(min, count[k]);
			}
			
			int[] next = {num-1, num+1, num*2};
			for(int i=0; i<3; i++) {
				if(next[i]>=0 && next[i]<=100000) {
					if(count[next[i]] == 0) {
						if(i == 2) {
							queue.add(next[i]);
							count[next[i]] = count[num];
						}
						else {
							queue.add(next[i]);
							count[next[i]] = count[num]+1;
						}
					}
					else if(count[next[i]] >= count[num]+1){
						if(i == 2) {
							queue.add(next[i]);
							count[next[i]] = count[num];
						}
						else {
							queue.add(next[i]);
							count[next[i]] = count[num]+1;
						}
					}
				}
			}
		}
	}
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		k = s.nextInt();
		count = new int[100001];
		
		dfs(n);
		
		System.out.println(min-1); //1을 더한 상태로 시작했기 때문에
	}
}
