import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	static boolean[][] check;
	static int[][] map;
	static int n, m;
	static int[] dir1 = {1, 0, -1, 0};
	static int[] dir2 = {0, 1, 0, -1};
	
	public static void dfs(int x, int y) {
		Queue<Integer> q1 = new LinkedList<>();
		Queue<Integer> q2 = new LinkedList<>();
		q1.add(x);
		q2.add(y);
		check[x][y] = true;
		
		while(!q1.isEmpty() && !q2.isEmpty()) {
			int curX = q1.remove();
			int curY = q2.remove();
			for(int i=0; i<4; i++) {
				int xx = curX + dir1[i];
				int yy = curY + dir2[i];
				if(xx>=0 && yy>=0 && xx<n && yy<m && !check[xx][yy] && map[xx][yy]>=1) {
					q1.add(xx);
					q2.add(yy);
					map[xx][yy] += map[curX][curY];
					check[xx][yy] = true;
				}
			}
		}
	}
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		n = s.nextInt();
		m = s.nextInt();
		s.nextLine();
		
		check = new boolean[n][m];
		map = new int[n][m];
		for(int i=0; i<n; i++) {
			String tmp = s.nextLine();
			for(int j=0; j<m; j++)
				map[i][j] = (int)tmp.charAt(j)-'0';
		}
		
		dfs(0, 0);
		System.out.println(map[n-1][m-1]);
	}
}
