//백트래킹보다 bfs가 훨씬 효율적...!!!
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	static int n, m;
	static int[][] map;
	static Integer[][] check;
	static Queue<pos> queue;
	
	static int[] dir1 = {0, 1, 0, -1, 1, 1, -1, -1};
	static int[] dir2 = {1, 0, -1, 0, 1, -1, 1, -1};
	
	static class pos{
		int x, y;
		public pos(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}
	
	public static int simulation() {
		int result = 0;
		
		while(!queue.isEmpty()) {
			pos cur = queue.remove();
			
			for(int i=0; i<8; i++) {
				int nextX = cur.x + dir1[i];
				int nextY = cur.y + dir2[i];
				
				if(nextX>=0 && nextY>=0 && nextX<n && nextY<m && check[nextX][nextY] == null) {
					check[nextX][nextY] = check[cur.x][cur.y] + 1;
					queue.add(new pos(nextX, nextY));
					
					if(result < check[nextX][nextY])
						result = check[nextX][nextY];
				}
			}
		}
		return result;
	}
	
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		n = s.nextInt();
		m = s.nextInt();

		map = new int[n][m];
		check = new Integer[n][m];
		queue = new LinkedList<>();
		for(int i=0; i<n; i++) {
			for(int j=0; j<m; j++) {
				map[i][j] = s.nextInt();
				if(map[i][j] == 1) {
					queue.add(new pos(i, j));
					check[i][j] = 0;
				}
			}
		}
		
		System.out.println(simulation());
	}
}
