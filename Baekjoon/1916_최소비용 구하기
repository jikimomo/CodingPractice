import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	static int n, m;
	static ArrayList<Node>[] list;
	static int[] distance;
	
	static class Node implements Comparable<Node>{
		int end;
		int cost;
		public Node(int end, int cost) {
			this.end = end;
			this.cost = cost;
		}
		public int compareTo(Node n) {
			return cost - n.cost;
		}
	}
	public static void dijkstra(int start) {
		boolean[] check = new boolean[n+1];
		PriorityQueue<Node> queue = new PriorityQueue<>();
		distance[start] = 0;
		queue.add(new Node(start, 0));
		
		while(!queue.isEmpty()) {
			Node curNode = queue.remove();
			int cur = curNode.end;
			
			if(!check[cur]) {
				check[cur] = true;
				for(int i=0; i<list[cur].size(); i++) {
					Node tmp = list[cur].get(i);
					if(distance[tmp.end] > distance[cur]+tmp.cost) {
						distance[tmp.end] = distance[cur]+tmp.cost;
						queue.add(new Node(tmp.end, distance[tmp.end]));
					}
				}
			}
		}
	}
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		n = Integer.parseInt(br.readLine());
		list = new ArrayList[n+1];
		distance = new int[n+1];
		for(int i=0; i<=n; i++)
			list[i] = new ArrayList<>();
		Arrays.fill(distance, Integer.MAX_VALUE);
		
		m = Integer.parseInt(br.readLine());
		StringTokenizer st = null;
		for(int i=0; i<m; i++) {
			st = new StringTokenizer(br.readLine());
			int s = Integer.parseInt(st.nextToken());
			int e = Integer.parseInt(st.nextToken());
			int c = Integer.parseInt(st.nextToken());
			list[s].add(new Node(e, c));
			
		}
		st = new StringTokenizer(br.readLine());
		int start = Integer.parseInt(st.nextToken());
		int end = Integer.parseInt(st.nextToken());
		
		dijkstra(start);
		
		bw.write(distance[end]+"\n");
		bw.flush();
		bw.close();
		br.close();
	}
}
