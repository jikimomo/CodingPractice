import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Iterator;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	static int n, m;
	static int[] arr;
	static int[] result;
	static boolean[] check;
	static LinkedHashSet<String> list;
	
	public static void dfs(int depth) {
		if(depth == m) {
			StringBuilder tmp = new StringBuilder();
			for(int i=0; i<m; i++)
				tmp.append(result[i]).append(" ");
			list.add(tmp.toString());
			return;
		}
		for(int i=0; i<n; i++) {
			if(depth == 0) {
				if(!check[i]) {
					check[i] = true;
					result[depth] = arr[i];
					dfs(depth+1);
					check[i] = false;
				}
			}
			else {
				if(!check[i] && result[depth-1]<=arr[i]) {
					check[i] = true;
					result[depth] = arr[i];
					dfs(depth+1);
					check[i] = false;
				}
			}
		}
	}

	public static void main(String[] args) throws IOException {
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	    StringTokenizer st = new StringTokenizer(br.readLine());

	    n = Integer.parseInt(st.nextToken());
			m = Integer.parseInt(st.nextToken());
			arr = new int[n];
			check = new boolean[n];
			result = new int[m];
			list = new LinkedHashSet<>();
			
			st = new StringTokenizer(br.readLine());
			for(int i=0; i<n; i++) 
				arr[i]= Integer.parseInt(st.nextToken());
			
			Arrays.sort(arr);
			dfs(0);
			
			Iterator<String> it = list.iterator();
			while(it.hasNext())
				System.out.println(it.next());
	}
}
