import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Iterator;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main{
	static int n, m;
	static int[] arr;
	static boolean[] check;
	static int[] result;
	static LinkedHashSet<String> list; //ArrayList 말고 LinkedHashSet사용
	
	public static void dfs(int depth) {
		if(depth == m) {
			StringBuilder tmp = new StringBuilder();
			for(int i=0; i<m; i++)
				tmp.append(result[i]).append(' ');
			list.add(tmp.toString());
			return;
		}
		
		for(int i=0; i<n; i++) {
			if(!check[i]) {
				check[i] = true;
				result[depth] = arr[i];
				dfs(depth+1);
				check[i] = false;
			}
		}
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); //scanner보다 빠른 bufferedReader 사용
    StringTokenizer st = new StringTokenizer(br.readLine());
        
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		arr = new int[n];
		check = new boolean[n];
		result = new int[m];
		list = new LinkedHashSet<>();
		
		st = new StringTokenizer(br.readLine());
		for(int i=0; i<n; i++) 
			arr[i]= Integer.parseInt(st.nextToken());
		
		Arrays.sort(arr);
		
		dfs(0);
		Iterator<String> it = list.iterator();
		while(it.hasNext())
			System.out.println(it.next());
	}
}
