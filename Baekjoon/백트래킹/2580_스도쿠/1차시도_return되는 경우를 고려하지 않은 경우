//처음 결정한 값이 맞는 값이라서 return되는 경우가 전혀 없는 테스트케이스는 통과
//전역변수인 pos를 함수 호출할 때 사용하여서 return이 되어도 pos값은 변화가 없음 -> return이 되어도 값 변경이 안됨
import java.util.Scanner;

public class Main {
	static int[][] board = new int[9][9]; 
	static int[][] zero;
	static int pos = -1;
	static int count = 0;
	
	public static void sudoku(int x, int y) {
		int i, j, h;
		boolean flag = true;
		int xtmp = (x/3)*3, ytmp = (y/3)*3;
		
		for(i=1; i<=9; i++) {
			flag = true;
			board[x][y] = i;
			for(j=0; j<9; j++) {
				if(y != j && board[x][y] == board[x][j]) //가로
					flag = false;
				if(x != j && board[x][y] == board[j][y]) //세로
					flag = false;
			}
			for(j=xtmp; j<xtmp+3; j++) {
				for(h=ytmp; h<ytmp+3; h++) {
					if((x != j || y != h) && board[x][y] == board[j][h]) //사각형
						flag = false;
				}
			}
			if(flag == false)
				continue;
			else {
				break;
			}
		}
		if(pos+1 == count)
			return;
		sudoku(zero[++pos][0], zero[pos][1]);
	}
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int i, j;
		int tmp = -1;
		
		for(i=0; i<9; i++) {
			for(j=0; j<9; j++) {
				board[i][j] = s.nextInt();
				if(board[i][j] == 0)
					count++;
			}
		}
		zero = new int[count][2]; //0이 있는 위치 저장할 배열
		for(i=0; i<9; i++) {
			for(j=0; j<9; j++) {
				if(board[i][j] == 0) { //0이 있는 위지 저장
					zero[++tmp][0] = i;
					zero[tmp][1] = j;
				}
			}
		}
		
		sudoku(zero[++pos][0], zero[pos][1]);
		
		for(i=0; i<9; i++) {
			for(j=0; j<9; j++)
				System.out.print(board[i][j]+" ");
			System.out.println();
		}
	}
}
