//전체 틀 잡아 해결하는 것보다 시간초과를 해결하는데 시간이 더 걸림
//같은 팀의 능력을 더할 때, (i,j)를 더할 때 (j, i)도 알 수 있다는 것을 이용해야함
//처음엔 재귀함수 호출 때마다 pick배열을 전부 살펴보도록 구현 -> 자신의 다음 사람부터 확인하도록 바꿈
import java.util.Scanner;

public class Main {
	static int n;
	static int[][] ability;
	static boolean[] pick;
	static int min = Integer.MAX_VALUE;
	
	public static void dfs(int index, int depth) {
		int tmp = 0, tmp1=0, tmp2=0;
		
		if(depth == n/2) {
			for(int i=0; i<n-1; i++) {
				for(int j=i+1; j<n; j++) {
					if(pick[i] && pick[j]) 
						tmp1 = tmp1 + ability[i][j] + ability[j][i];
					if(!pick[i] && !pick[j])
						tmp2 = tmp2 + ability[i][j] + ability[j][i];
				}
			}
			tmp = Math.abs(tmp1-tmp2);
			if(min>tmp)
				min = tmp;
			return;
		}
		
		for(int i=index; i<n; i++) {
			if(!pick[i]) {
				pick[i] = true;
				dfs(i+1, depth+1);
				pick[i] = false;
			}
		}
	}
	public static void main(String[] args){
		Scanner s = new Scanner(System.in);
		n = s.nextInt();
		
		ability = new int[n][n];
		pick = new boolean[n];

		for(int i=0; i<n; i++) {
			for(int j=0; j<n; j++)
				ability[i][j] = s.nextInt();
		}
		dfs(0, 0);
		System.out.println(min);
	}
}
