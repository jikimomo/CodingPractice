import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	static int N;
	static int[][] A;
	
	static int[] dir1 = {0, 1, 0, -1}; //왼, 아래, 오, 위
	static int[] dir2 = {-1, 0, 1, 0};
	static int result = 0;
	
	public static void sand(int direction, int endX, int endY) {
		int s = A[endX][endY];
		int p10 = (int)(s*0.1);
		int p7 = (int)(s*0.07);
		int p5 = (int)(s*0.05);
		int p2 = (int)(s*0.02);
		int p1 = (int)(s*0.01);
		int a = s - 2*(p10+p7+p2+p1)- p5;
		
		if(direction%2 == 0) { //direction 0, 2
			//10%
			if(check(endX+1, endY+dir2[direction])) 
				A[endX+1][endY+dir2[direction]] += p10;
			else
				result += p10;
			if(check(endX-1, endY+dir2[direction])) 
				A[endX-1][endY+dir2[direction]] += p10;
			else
				result += p10;
		
			//7%
			if(check(endX+1, endY)) 
				A[endX+1][endY] += p7;
			else
				result += p7;
			if(check(endX-1, endY)) 
				A[endX-1][endY] += p7;
			else
				result += p7;
		
			//5%
			if(check(endX, endY+2*dir2[direction]))
				A[endX][endY+2*dir2[direction]] += p5;
			else
				result += p5;
			
			//2%
			if(check(endX+2, endY)) 
				A[endX+2][endY] += p2;
			else
				result += p2;
			if(check(endX-2, endY)) 
				A[endX-2][endY] += p2;
			else
				result += p2;
		
			//1%
			if(check(endX+1, endY+dir2[direction]*-1)) 
				A[endX+1][endY+dir2[direction]*-1] += p1;
			else
				result += p1;
			if(check(endX-1, endY+dir2[direction]*-1)) 
				A[endX-1][endY+dir2[direction]*-1] += p1;
			else
				result += p1;
			
			//a
			if(check(endX, endY+dir2[direction]))
				A[endX][endY+dir2[direction]] += a;
			else
				result += a;
		}
		else { //direction 1, 3
			//10%
			if(check(endX+dir1[direction], endY+1)) 
				A[endX+dir1[direction]][endY+1] += p10;
			else
				result += p10;
			if(check(endX+dir1[direction], endY-1)) 
				A[endX+dir1[direction]][endY-1] += p10;
			else
				result += p10;
			
			//7%
			if(check(endX, endY+1)) 
				A[endX][endY+1] += p7;
			else
				result += p7;
			if(check(endX, endY-1)) 
				A[endX][endY-1] += p7;
			else
				result += p7;
			
			//5%
			if(check(endX+2*dir1[direction], endY))
				A[endX+2*dir1[direction]][endY] += p5;
			else
				result += p5;
			
			//2%
			if(check(endX, endY+2)) 
				A[endX][endY+2] += p2;
			else
				result += p2;
			if(check(endX, endY-2)) 
				A[endX][endY-2] += p2;
			else
				result += p2;
			
			//1%
			if(check(endX+dir1[direction]*-1, endY+1)) 
				A[endX+dir1[direction]*-1][endY+1] += p1;
			else
				result += p1;
			if(check(endX+dir1[direction]*-1, endY-1)) 
				A[endX+dir1[direction]*-1][endY-1] += p1;
			else
				result += p1;
			
			//a
			if(check(endX+dir1[direction], endY))
				A[endX+dir1[direction]][endY] += a;
			else
				result += a;
		}
		
	}

	public static boolean check(int x, int y) {
		if(x>=0 && y>=0 && x<N && y<N)
			return true;
		else
			return false;
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		A = new int[N][N];
		StringTokenizer st = null;
		
		for(int i=0; i<N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0; j<N; j++)
				A[i][j] = Integer.parseInt(st.nextToken());
		}
		
		int startX = N/2, startY = N/2;
		int endX = startX, endY = startY;
		int step = 1, count = 0, direction = 0;
		loop : while(endX != 0 || endY != 0) {
			while(count < 2) {
				for(int i=0; i<step; i++) {
					endX = startX + dir1[direction];
					endY = startY + dir2[direction];
					startX = endX;
					startY = endY;
					
					sand(direction, endX, endY);
					if(endX == 0 && endY == 0)
						break loop;
					
				}
				direction = (direction + 1) % 4;
				count++;
			}
			count = 0;
			step++;
		}
		
		System.out.println(result);
	}
}
