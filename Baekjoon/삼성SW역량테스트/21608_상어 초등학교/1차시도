import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	static int n;
	static ArrayList<Integer>[] inputPrefer;
	
	static int result;
	static int[][] pos;
	static int[] dir1 = {1, 0, -1, 0};
	static int[] dir2 = {0, 1, 0, -1};
	
	static class Node implements Comparable<Node>{
		int x, y, prefer, empty;
		
		public Node(int x, int y, int prefer, int empty) {
			this.x = x;
			this.y = y;
			this.prefer = prefer;
			this.empty = empty;
		}
		
		@Override
		public int compareTo(Node n) {
			if(this.prefer == n.prefer) {
				if(this.empty == n.empty) {
					if(this.x == n.x)
						return this.y - n.y;
					else
						return this.x - n.x;
				}
				return n.empty - this.empty;
			}
			return n.prefer - this.prefer;
		}
	}
	
	public static Node selectPos(int Student) {
		PriorityQueue<Node> pq = new PriorityQueue<>();
		
		for(int i=0; i<n; i++) {
			for(int j=0; j<n; j++) {
				if(pos[i][j] == 0) {
					int prefer = 0;
					int empty = 0;
					
					for(int k=0; k<4; k++) {
						int x = dir1[k];
						int y = dir2[k];
						if(x>=0&&y>=0&&x<n&&y<n) {
							if(pos[x][y] == 0)
								empty++;
							for(int indPrefer=0; indPrefer<4; indPrefer++) {
								if(inputPrefer[Student].get(indPrefer) == pos[x][y])
									prefer++;
							}
						}
					}
					
					pq.add(new Node(i, j, prefer, empty));
				}
			}
		}
		
		return pq.remove();
	}
	
	public static void calculateSum() {
		for(int i=0; i<n; i++) {
			for(int j=0; j<n; j++) {
				int count = 0;
				for(int k=0; k<4; k++) {
					int x = i + dir1[k];
					int y = j + dir2[k];
					if(x>=0&&y>=0&&x<n&&y<n) {
						for(int h=0; h<4; h++) {
							if(inputPrefer[pos[i][j]].get(h) == pos[x][y])
								count++;
						}
					}
				}
				if(count != 0) {
					result += Math.pow(10, count-1);
				}
			}
		}
	}
	
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		
		n = Integer.parseInt(br.readLine());
		inputPrefer = new ArrayList[n*n+1];
		inputPrefer[0] = new ArrayList<>();
		pos = new int[n][n]; //자리 배치도
		
		for(int i=1; i<=n*n; i++) {
			st = new StringTokenizer(br.readLine());
			int inputStudent = Integer.parseInt(st.nextToken());
			inputPrefer[inputStudent] = new ArrayList<>();
			for(int j=0; j<4; j++)
				inputPrefer[inputStudent].add(Integer.parseInt(st.nextToken()));
			
			Node node = selectPos(inputStudent);
			pos[node.x][node.y] = inputStudent;
		}
		
		for(int i=0; i<n; i++) {
			for(int j=0; j<n; j++)
				System.out.print(pos[i][j]+" ");
			System.out.println();
		}
		
		calculateSum();
		System.out.println(result);
	}
}
