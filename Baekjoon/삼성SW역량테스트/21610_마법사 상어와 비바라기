//moveCloud에서 1과 N이 붙어있는 것을 주의해야 함!! -> N뿐만 아니라 N의 배수도 고려해야하는데 그 부분에서 헤맴
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Main {
	static int N, M;
	static int[][] A;
	static int[][] d;
	static boolean[][] check;
	
	static int[] dir1 = {0, 0, -1, -1, -1, 0, 1, 1, 1};
	static int[] dir2 = {0, -1, -1, 0, 1, 1, 1, 0, -1};
	static ArrayList<cloud> cloudList = new ArrayList<>();
	
	static int[] dia1 = {-1, -1, 1, 1};
	static int[] dia2 = {-1, 1, 1, -1};
	
	static class cloud{
		int x;
		int y;
		cloud(int x, int y){
			this.x = x;
			this.y = y;
		}
	}
	
	public static void moveCloud(int direct, int length) { 
		int cloudSize = cloudList.size();
		check = new boolean[N+1][N+1];
		for(int i=0; i<cloudSize; i++) {
			cloud current = cloudList.remove(0);
			
			int nextX = current.x + dir1[direct]*length;
			int nextY = current.y + dir2[direct]*length;
			
			if(nextX <= 0 || nextX%N == 0) //N 뿐만 아니라 N의 배수까지 고려해야함!!
				nextX = N + (nextX % N);
			else if(nextX > N)
				nextX = nextX % N;
			
			if(nextY <= 0 || nextY%N == 0)
				nextY = N + (nextY % N);
			else if(nextY > N)
				nextY = nextY % N;;
			cloudList.add(new cloud(nextX, nextY));
			check[nextX][nextY] = true;
		}
	}
	
	public static void calculate() {
		for(int indMove=0; indMove<M; indMove++) {
			moveCloud(d[indMove][0], d[indMove][1]);
		
			for(int i=0; i<cloudList.size(); i++) { //비에서 내린 물 +1
				A[cloudList.get(i).x][cloudList.get(i).y]++;
			}
			
			for(int i=0; i<cloudList.size(); i++) { //대각선 개수만큼
				int count = 0;
				int curX = cloudList.get(i).x;
				int curY = cloudList.get(i).y;
				for(int j=0; j<4; j++) {
					int diaX = curX + dia1[j];
					int diaY = curY + dia2[j];
					if(diaX>0&&diaY>0&&diaX<=N&&diaY<=N && A[diaX][diaY]>0)
						count++;
				}
				A[curX][curY] += count;
			}
			
			int removeSize = cloudList.size();
			for(int i=1; i<=N; i++) {
				for(int j=1; j<=N; j++) {
					if(A[i][j]>=2 && !check[i][j]) {
						A[i][j] -= 2;
						cloudList.add(new cloud(i, j));
						check[i][j] = true;
					}
				}
			}
			for(int i=0; i<removeSize; i++) {
				cloud tmp = cloudList.remove(0);
				check[tmp.x][tmp.y] = false;
			}
		}
	}
	
	public static int findSum() {
		int sum = 0;
		for(int i=1; i<=N; i++) {
			for(int j=1; j<=N; j++)
				sum += A[i][j];
		}
		
		return sum;
	}

	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		
		A = new int[N+1][N+1];
		check = new boolean[N+1][N+1];
		for(int i=1; i<=N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=1; j<=N; j++)
				A[i][j] = Integer.parseInt(st.nextToken());
		}
		
		d = new int[M][2];
		for(int i=0; i<M; i++) {
			st = new StringTokenizer(br.readLine());
			d[i][0] = Integer.parseInt(st.nextToken());
			d[i][1] = Integer.parseInt(st.nextToken());
		}
		
		cloudList.add(new cloud(N-1, 1));
		cloudList.add(new cloud(N-1, 2));
		cloudList.add(new cloud(N, 1));
		cloudList.add(new cloud(N, 2));
		check[N-1][1] = true;
		check[N-1][2] = true;
		check[N][1] = true;
		check[N][2] = true;
		
		calculate();
		System.out.println(findSum());
	}
}
