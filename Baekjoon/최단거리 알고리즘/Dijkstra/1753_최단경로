import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	static int v, e, k;
	static ArrayList<Node>[] tree; //LinkedList로 하면 시간초과 발생
	static int[] dist;
	
	static class Node implements Comparable<Node>{
		int end, weight;
		public Node(int end, int weight) {
			this.end = end;
			this.weight = weight;
		}
		public int compareTo(Node n) {
			return weight - n.weight;
		}
	}
	public static void dijkstra(int start) {
		PriorityQueue<Node> queue = new PriorityQueue<>();
		boolean[] check = new boolean[v+1];
		queue.add(new Node(start, 0));
		dist[start] = 0;
		
		while(!queue.isEmpty()) {
			Node curNode = queue.remove();
			int current = curNode.end;
			
			if(!check[current]) {
				check[current] = true;
				for(int i=0; i<tree[current].size(); i++) {
					Node tmp = tree[current].get(i);
					if(dist[tmp.end] > dist[current]+tmp.weight) {
						dist[tmp.end] = dist[current] + tmp.weight;
						queue.add(new Node(tmp.end, dist[tmp.end]));
					}
				}
			}
		}
	}
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
    StringTokenizer st;
        
    st = new StringTokenizer(br.readLine());
		v = Integer.parseInt(st.nextToken());
		e = Integer.parseInt(st.nextToken());
		k = Integer.parseInt(br.readLine());
		tree = new ArrayList[v+1];
		dist = new int[v+1];
		
		for(int i=0; i<=v; i++)
			tree[i] = new ArrayList<Node>();
		Arrays.fill(dist, Integer.MAX_VALUE);
		for(int i=0; i<e; i++) {
			st = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(st.nextToken());
			int end = Integer.parseInt(st.nextToken());
			int weight = Integer.parseInt(st.nextToken());
			tree[start].add(new Node(end, weight));
		}
		
		dijkstra(k);
		
		for(int i=1; i<=v; i++) {
			if(dist[i] == Integer.MAX_VALUE)
				bw.write("INF\n");
			else
				bw.write(dist[i]+"\n");
		}
		bw.flush();
		bw.close();
		br.close();
	}
}
