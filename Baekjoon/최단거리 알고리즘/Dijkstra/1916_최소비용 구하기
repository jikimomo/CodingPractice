import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	static int n, m;
	static ArrayList<Node>[] tree;
	static int[] cost;
	
	static class Node implements Comparable<Node>{
		int end;
		int weight;
		public Node(int end, int weight) {
			this.end = end;
			this.weight = weight;
		}
		public int compareTo(Node n) {
			return weight - n.weight;
		}
	}
	public static void dijkstra(int start) {
		PriorityQueue<Node> queue = new PriorityQueue<>();
		boolean[] check = new boolean[n+1];
		cost[start] = 0;
		queue.add(new Node(start, 0));
		
		while(!queue.isEmpty()) {
			Node curNode = queue.remove();
			int current = curNode.end;
			
			if(!check[current]) {
				check[current] = true;
				for(int i=0; i<tree[current].size(); i++) {
					Node tmp = tree[current].get(i);
					if(cost[tmp.end] > cost[current]+tmp.weight) {
						cost[tmp.end] = cost[current]+tmp.weight;
						queue.add(new Node(tmp.end, cost[tmp.end]));
					}
				}
			}
		}
	}
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;
        n = Integer.parseInt(br.readLine());
        m = Integer.parseInt(br.readLine());
        tree = new ArrayList[n+1];
        cost = new int[n+1];
        
        for(int i=0; i<=n; i++)
        	tree[i] = new ArrayList<>();
        Arrays.fill(cost, Integer.MAX_VALUE);
        
        for(int i=0; i<m; i++) {
        	st = new StringTokenizer(br.readLine());
        	int start = Integer.parseInt(st.nextToken());
        	int end = Integer.parseInt(st.nextToken());
        	int cost = Integer.parseInt(st.nextToken());
        	tree[start].add(new Node(end, cost));
        }
        st = new StringTokenizer(br.readLine());
        int startNode = Integer.parseInt(st.nextToken());
        int endNode = Integer.parseInt(st.nextToken());
        		
        dijkstra(startNode);
        
        bw.write(cost[endNode]+"\n");
        bw.flush();
        bw.close();
        br.close();
	}
}
