import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	static int m, n;
	static int[][] road;
	static int[][] result;
	static int[] dire1 = {-1, 1, 0, 0};
	static int[] dire2 = {0, 0, -1, 1};
	
	static class Node implements Comparable<Node>{
		int x;
		int y;
		int cost;
		public Node(int x, int y, int cost) {
			this.x = x;
			this.y = y;
			this.cost = cost;
		}
		public int compareTo(Node n) {
			return cost - n.cost;
		}
	}
	public static void dijkstra(int xIndex, int yIndex) {
		boolean flag = false;
		PriorityQueue<Node> queue = new PriorityQueue<>();
		if(road[xIndex][yIndex] != -1)
			queue.add(new Node(xIndex, yIndex, road[xIndex][yIndex]));
		
		while(!queue.isEmpty()) {
			Node curNode = queue.remove();
			int x = curNode.x;
			int y = curNode.y;
			int cost = curNode.cost;
			
			if(result[x][y] >= cost) {
				result[x][y] = cost;
				if(x == m-1 && y == n-1)
					return;
				for(int i=0; i<4; i++) {
					int xNext = x + dire1[i];
					int yNext = y + dire2[i];
					if(xNext>=0 && yNext>=0 && xNext<m && yNext<n) {
						if(cost+road[xNext][yNext]<result[xNext][yNext] && road[xNext][yNext]!=-1) {
							queue.add(new Node(xNext, yNext, cost+road[xNext][yNext]));
						}
					}
				}
			}
		}
	}
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine());
		m = Integer.parseInt(st.nextToken());
		n = Integer.parseInt(st.nextToken());
		road = new int[m][n];
		result = new int[m][n];
		for(int i=0; i<m; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0; j<n; j++) {
				road[i][j]= Integer.parseInt(st.nextToken());
				result[i][j] = Integer.MAX_VALUE;
			}
		}
		
		dijkstra(0, 0);
		if(result[m-1][n-1] == Integer.MAX_VALUE)
			bw.write("-1\n");
		else
			bw.write(result[m-1][n-1]+"\n");
		bw.flush();
		bw.close();
		br.close();
	}
}
