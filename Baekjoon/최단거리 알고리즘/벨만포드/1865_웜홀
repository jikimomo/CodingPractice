import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	static class Node{
		int start;
		int end;
		int time;
		public Node(int start, int end, int time) {
			this.start = start;
			this.end = end;
			this.time = time;
		}
	}
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int tc = Integer.parseInt(br.readLine());
        int h = 0;
        
        while(h<tc) {
        	StringTokenizer st = new StringTokenizer(br.readLine());
        	int n = Integer.parseInt(st.nextToken()); //지점의 수
        	int m = Integer.parseInt(st.nextToken()); //도로의 수
        	int w = Integer.parseInt(st.nextToken()); //웜홀 개수
        	
        	Node[] city = new Node[m*2+w];
    		for(int i=0; i<m*2;) {
    			st = new StringTokenizer(br.readLine());
    			int s = Integer.parseInt(st.nextToken());
    			int e = Integer.parseInt(st.nextToken());
    			int t = Integer.parseInt(st.nextToken());
    			city[i++] = new Node(s, e, t);
    			city[i++] = new Node(e, s, t);
    		}
    		for(int i=0; i<w; i++) {
    			st = new StringTokenizer(br.readLine());
    			int s = Integer.parseInt(st.nextToken());
    			int e = Integer.parseInt(st.nextToken());
    			int t = Integer.parseInt(st.nextToken());
    			city[m*2+i] = new Node(s, e, -1*t);
    		}
    		
    		long[] dist = new long[n+1];
    		Arrays.fill(dist, Integer.MAX_VALUE);
    		
    		for(int i=1; i<n; i++) {
    			for(int j=0; j<m*2+w; j++) {
    				Node node = city[j];
    				if(dist[node.end]>dist[node.start]+node.time) 
    					dist[node.end] = dist[node.start]+node.time;
    			}
    		}
    		boolean negative_cycle = false;
    		for(int i=0; i<m*2+w; i++) {
    			if(dist[city[i].end]>dist[city[i].start]+city[i].time)
    				negative_cycle = true;
    		}
    		
    		if(negative_cycle)
    			bw.write("YES\n");
    		else 
    			bw.write("NO\n");
    		h++;
        }
        
        bw.flush();
        bw.close();
        br.close();
	}
}
