//min[n][0] = arr[n][0] + Math.min(dfs(n-1)[1], dfs(n-1)[2]) => 배열의 처음부터 시작, 바로 앞 집의 색 중에서 자신의 색 외의 다른 색만 고려, 둘 중 작은 값 선택
//1  100 103
//101 104 201
//204 102 204

import java.util.Scanner;

public class Main {
	static long[][] min = new long[1001][3];
	static int[][] arr;
	public static long[] dfs(int n) {
		if(min[n][0] == -1) {
			min[n][0] = arr[n][0] + Math.min(dfs(n-1)[1], dfs(n-1)[2]);
			min[n][1] = arr[n][1] + Math.min(dfs(n-1)[0], dfs(n-1)[2]);
			min[n][2] = arr[n][2] + Math.min(dfs(n-1)[0], dfs(n-1)[1]);
		}	
		return min[n];
	}
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		arr = new int[n+1][3];
		for(int i=1; i<=n; i++) {
			arr[i][0] = s.nextInt();
			arr[i][1] = s.nextInt();
			arr[i][2] = s.nextInt();
		}
		
		for(int i=2; i<=1000; i++) {
			min[i][0] = -1;
			min[i][1] = -1;
			min[i][2] = -1;
		}
		min[0][0] = 0;
		min[0][1] = 0;
		min[0][2] = 0;
		min[1][0] = arr[1][0];
		min[1][1] = arr[1][1];
		min[1][2] = arr[1][2];
		
		long[] tmp = dfs(n);
		long result = tmp[0];
		for(int i=1; i<3; i++) {
			if(result>tmp[i])
				result = tmp[i];
		}
		System.out.println(result);
	}
}
