import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Comparator;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.TreeMap;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = null;
		
		int n = Integer.parseInt(br.readLine());
		Comparator<Integer> comparator = (t1, t2) -> t1.compareTo(t2);
		Map<Integer, Integer> map = new TreeMap<>(comparator);
		st = new StringTokenizer(br.readLine());
		for(int i=0; i<n; i++) {
			int input = Integer.parseInt(st.nextToken());
			if(map.containsKey(input)) {
				int tmp = map.get(input);
				map.put(input, tmp+1);
			}
			else
				map.put(input, 1);
				
		}
		int[] card = new int[map.size()];
		int j=0;
		for(Map.Entry<Integer, Integer> entry : map.entrySet())
			card[j++] = entry.getKey();
		
		int m = Integer.parseInt(br.readLine());
		int[] num = new int[m];
		st = new StringTokenizer(br.readLine());
		for(int i=0; i<m; i++)
			num[i] = Integer.parseInt(st.nextToken());
		
		for(int i=0; i<m; i++) {
			int count = 0;
			int start = 0, end = map.size()-1;
			int mid;
			while(start <= end) {
				mid = (start+end)/2;
				if(num[i] == card[mid]) {
					count = map.get(card[mid]);
					break;
				}
				else if(num[i] < card[mid]) {
					end = mid-1;
				}
				else {
					start = mid+1;
				}
			}
			bw.write(count+" ");
		}
		
		bw.flush();
		bw.close();
		br.close();
	}
}
