import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String input = br.readLine();
		StringTokenizer st = new StringTokenizer(input);
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		int k = Integer.parseInt(st.nextToken());
		
		int[][] port = new int[n+1][2];
		int[] seq = new int[m];
		int[] dp = new int[n+1];
		boolean[] check = new boolean[n+1];
		for(int i=1; i<=n; i++) {
			input = br.readLine();
			st = new StringTokenizer(input);
			port[i][0] = Integer.parseInt(st.nextToken()); //L
			port[i][1] = Integer.parseInt(st.nextToken()); //R
		}
		input = br.readLine();
		st = new StringTokenizer(input);
		for(int i=0; i<m; i++) {
			if(st.nextToken().equals("L"))
				seq[i] = 0;
			else
				seq[i] = 1;
		}

		for(int i=1; i<=n; i++) {
			int node = i;
			for(int j=0; j<m; j++) {
				int tmp = port[node][seq[j]];
				node = tmp;
			}
			dp[i] = node;
		}
		
		int cycle = 1;
		int len = 0;
		while(true) {
			if(check[cycle]) {
				break;
			}
			check[cycle] = true;
			cycle = dp[cycle];
			len++;
		}
		
		int start = 1;
		while(true) {
			if(cycle == start) {
				break;
			}
			start = dp[start];
			k--;
			len--;
			if(k==0) {
				System.out.println(start);
				return;
			}
		}
		k = k%len;
		int node = cycle;
		while(k>0) {
			node = dp[node];
			k--;
		}
		System.out.println(node);
	}
}
