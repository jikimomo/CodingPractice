import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {	
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		ArrayList<Integer>[] graph = new ArrayList[n+1];
		for(int i=0; i<=n; i++) {
			graph[i] = new ArrayList<>();
		}
		
		for(int i=0; i<n-1; i++) {
			int a = s.nextInt();
			int b = s.nextInt();
			graph[a].add(b);
			graph[b].add(a);
		}
		
		int[] path = new int[n+1];
		int[] order = new int[n+1]; //각 숫자가 path의 몇번째 index에 있는지를 저장
		for(int i=1; i<=n; i++) {
			path[i] = s.nextInt();
			order[path[i]] = i;
		}
		
		for(int i=1; i<=n; i++) {
			Collections.sort(graph[i], new Comparator<Integer>() {
				public int compare(Integer a, Integer b) {
					if(order[a] > order[b]) {
						return 1;
					}
					else if (order[a] == order[b]){
						return 0;
					}
					else {
						return -1;
					}
				}
			});
		}
		
		boolean[] check = new boolean[n+1];
		Queue<Integer> queue = new LinkedList<>();
		queue.add(1);
		check[1] = true;
        
    boolean flag = true;
		int index = 1;
		while(!queue.isEmpty()) {
			int cur = queue.remove();
			if(path[index++] != cur) {
				flag = false;
				break;
			}
			
			for(int i=0; i<graph[cur].size(); i++) {
				int next = graph[cur].get(i);
				if(!check[next]) {
					check[next] = true;
					queue.add(next);
				}
			}
		}

		if(flag) {
			System.out.println("1"); 
		}
		else {
			System.out.println("0");
		}
	}
}
