import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayDeque;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

//40% 시간초과에서 시간초과 발생
public class Main {
	static class pair{
		int n, count;
		pair(int n, int count){
			this.n = n;
			this.count = count;
		}
	}
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		int n = Integer.parseInt(br.readLine());
		String tmp;
		StringTokenizer st = null;
		int num, i, j;
		Queue<pair> queue = new ArrayDeque<>();
		LinkedList<Integer>[] list = new LinkedList[n+1];
		int[] result = new int[n+1];
		
		for(i=0; i<=n; i++) {
			list[i] = new LinkedList<Integer>();
			result[i] = -1;
		}
		for(i=1; i<=n; i++) {
			tmp = br.readLine();
			st = new StringTokenizer(tmp);
			while(true) {
				num = Integer.parseInt(st.nextToken());
				if(num != 0)
					list[i].add(num);
				else
					break;
			}
		}
		
		int m = Integer.parseInt(br.readLine());
		tmp = br.readLine();
		st = new StringTokenizer(tmp);
		for(i=0; i<m; i++) {
			num = Integer.parseInt(st.nextToken());
			queue.add(new pair(num,0));
			result[num] = 0;
		}
		
		while(!queue.isEmpty()) {
			pair pre = queue.remove();
			int preN = pre.n;
			int preCount = pre.count;
			for(i=0; i<list[preN].size(); i++) {
				int next = list[preN].get(i);
				int nextSize = list[next].size();
				if(result[next] == -1) {
					int size = 0;
					for(j=0; j<nextSize; j++) {
						if(result[list[next].get(j)]!=-1 && result[list[next].get(j)]<=preCount)
							size++;
					}
					if((double)size/nextSize >= 0.5) {
						queue.add(new pair(next, preCount+1));
						result[next] = preCount+1;
					}
				}
			}
		}
		for(i=1; i<=n; i++)
			bw.write(result[i]+" ");
		br.close();
		bw.close();
	}
}
