//각 사람마다 루머를 믿게 되는 주변인의 수를 매번 for문으로 count하던 이전 코드와는 달리 degree에 저장하여 degree를 감소하는 방식으로 구현

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int n, m;
	static int[] time, degree;
	static ArrayList<Integer>[] graph;
	static Queue<Integer> queue;
	
	public static void solution() {
		while(!queue.isEmpty()) {
			int cur = queue.remove();

			for(int i=0; i<graph[cur].size(); i++) {
				int next = graph[cur].get(i);
				degree[next]--;
				
				if(degree[next] == 0) {
					queue.add(next);
					time[next] = time[cur] + 1;
				}
			}
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n = Integer.parseInt(br.readLine());
		StringTokenizer st = null;
        
		graph = new ArrayList[n+1];
		time = new int[n+1];
		degree = new int[n+1];
		
		for(int i=1; i<=n; i++) {
			graph[i] = new ArrayList<Integer>();
			time[i] = -1;
			st = new StringTokenizer(br.readLine());
			while(true) {
				int num = Integer.parseInt(st.nextToken());
				if(num != 0) {
					graph[i].add(num);
					degree[i]++;
				}
				else
					break;
			}
		}
		
		int m = Integer.parseInt(br.readLine());
		st = new StringTokenizer(br.readLine());
		queue = new LinkedList<>();
		for(int i=0; i<m; i++) {
			int num = Integer.parseInt(st.nextToken());
			queue.add(num);
			time[num] = 0;
			degree[num] = 0;
		}
		
		for(int i=1; i<=n; i++) {
			if(degree[i]%2 == 1) {
				degree[i] = degree[i]/2 + 1;
			}
			else
				degree[i] = degree[i]/2;
		}
		
		solution();
		
		for(int i=1; i<=n; i++)
			System.out.print(time[i]+" ");
	}
}
