import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	static int n, m;
	static int goal;
	static int[][] tomato;
	static boolean[][] check;
	static int[] dire1 = {-1, 1, 0, 0};
	static int[] dire2 = {0, 0, -1, 1};

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		m = s.nextInt();
		n = s.nextInt();
		tomato = new int[n][m];
		check = new boolean[n][m];
		Queue<Integer> q1 = new LinkedList<>();
		Queue<Integer> q2 = new LinkedList<>();
		for(int i=0; i<n; i++) {
			for(int j=0; j<m; j++) {
				tomato[i][j] = s.nextInt();
				if(tomato[i][j] == 0)
					goal++;
				else if(tomato[i][j] == 1) {
					q1.add(i);
					q2.add(j);
					check[i][j] = true;
				}
			}
		}
		
		int max = 1;
		int count = 0;
		while(!q1.isEmpty() && !q2.isEmpty()) {
			int x = q1.remove();
			int y = q2.remove();
			
			for(int i=0; i<4; i++) {
				int tmp1 = x+dire1[i];
				int tmp2 = y+dire2[i];
				
				if(tmp1>=0 && tmp2>=0 && tmp1<n && tmp2<m && !check[tmp1][tmp2] && tomato[tmp1][tmp2] == 0) {
					count++;
					check[tmp1][tmp2] = true;
					tomato[tmp1][tmp2] = tomato[x][y] + 1;
					max = Math.max(max, tomato[tmp1][tmp2]);
					q1.add(tmp1);
					q2.add(tmp2);
				}
			}
			
		}
		if(goal == count)
			System.out.println(max-1);
		else
			System.out.println("-1");
	}
}
