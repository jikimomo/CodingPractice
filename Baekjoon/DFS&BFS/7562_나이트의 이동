import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	static int[] dir1 = {-2, -1, 1, 2, -2, -1, 2, 1};
	static int[] dir2 = {-1, -2, -2, -1, 1, 2, 1, 2};
	
	static class pos{
		int x, y;
		public pos(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int t = s.nextInt();
		int test = 0;
		
		StringBuilder sb = new StringBuilder();
		while(test < t) {
			int l = s.nextInt();
			int[][] chess = new int[l][l];
			boolean[][] check = new boolean[l][l];
			
			int[] curPos = new int[2];
			curPos[0] = s.nextInt();
			curPos[1] = s.nextInt();
			chess[curPos[0]][curPos[1]] = 1;
			
			int[] finalPos = new int[2];
			finalPos[0] = s.nextInt();
			finalPos[1] = s.nextInt();
			
			Queue<pos> queue = new LinkedList<>();
			queue.add(new pos(curPos[0], curPos[1]));
			check[curPos[0]][curPos[1]] = true;
			while(!queue.isEmpty()) {
				pos cur = queue.remove();
				if(finalPos[0] == cur.x && finalPos[1] == cur.y) {
					sb.append(chess[cur.x][cur.y]-1+"\n");
					break;
				}
				
				for(int i=0; i<8; i++) {
					int nextX = cur.x + dir1[i];
					int nextY = cur.y + dir2[i];
					if(nextX>=0&&nextY>=0&&nextX<l&&nextY<l && !check[nextX][nextY]) {
						queue.add(new pos(nextX, nextY));
						check[nextX][nextY] = true;
						chess[nextX][nextY] = chess[cur.x][cur.y] + 1;
					}
				}
			}
			
			queue.clear();
			test++;
		}
		System.out.println(sb);
	}
}
