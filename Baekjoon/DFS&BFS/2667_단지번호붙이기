import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Collections;

public class Main {
	static int[] dir1 = {0, 1, 0, -1};
	static int[] dir2 = {1, 0, -1, 0};
	static int[][] map;
	static boolean[][] check;
	static int n;
	static int count;
	
	public static void dfs(int x, int y) {
		check[x][y] = true;
		count++;
		for(int i=0; i<4; i++) {
			int tmpx = x + dir1[i];
			int tmpy = y + dir2[i];
			if(tmpx>=0&&tmpy>=0&&tmpx<n&&tmpy<n && map[tmpx][tmpy]==1 && !check[tmpx][tmpy])
				dfs(tmpx, tmpy);
		}
	}
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		n = Integer.parseInt(br.readLine());
		map = new int[n][n];
		check = new boolean[n][n];
		ArrayList<Integer> result = new ArrayList<>();
		for(int i=0; i<n; i++) {
			String tmp = br.readLine();
			for(int j=0; j<n; j++)
				map[i][j] = tmp.charAt(j)-'0';
		}
		
		for(int i=0; i<n; i++) {
			for(int j=0; j<n; j++)
				if(!check[i][j] && map[i][j]==1) {
					count = 0;
					dfs(i, j);
					result.add(count);
				}
		}
		
		Collections.sort(result);
		bw.write(result.size()+"\n");
		for(int i=0; i<result.size(); i++)
			bw.write(result.get(i)+"\n");
		bw.flush();
		bw.close();
		br.close();
	}
}
