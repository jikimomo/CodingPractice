import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main {
	static int[] dir1 = {1, 0, -1, 0};
	static int[] dir2 = {0, 1, 0, -1};
	static int[][] map;
	static boolean[][] check;
	static int n, m;
	
	public static void dfs(int x, int y) {
		check[x][y] = true;
		for(int i=0; i<4; i++) {
			int tmpx = x+dir1[i];
			int tmpy = y+dir2[i];
			if(tmpx>=0&&tmpy>=0&&tmpx<n&&tmpy<m && !check[tmpx][tmpy] && map[tmpx][tmpy]==1)
				dfs(tmpx, tmpy);
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = null;
		int t = Integer.parseInt(br.readLine());
		
		for(int h=0; h<t; h++) {
			st = new StringTokenizer(br.readLine());
			n = Integer.parseInt(st.nextToken());
			m = Integer.parseInt(st.nextToken());
			int k = Integer.parseInt(st.nextToken());
			map = new int[n][m];
			check = new boolean[n][m];
			for(int p=0; p<k; p++) {
				st = new StringTokenizer(br.readLine());
				int tmpx = Integer.parseInt(st.nextToken());
				int tmpy = Integer.parseInt(st.nextToken());
				map[tmpx][tmpy] = 1;
			}
			
			int count = 0;
			for(int i=0; i<n; i++) {
				for(int j=0; j<m; j++) {
					if(!check[i][j] && map[i][j]==1) {
						count++;
						dfs(i, j);
					}
				}
			}
			bw.write(count+"\n");
		}
		bw.flush();
		bw.close();
		br.close();
	}
}
