package DFS_BFS;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class bj6087 {
	static int h, w;
	static char[][] map;
	static int[][] count;
	static pos[] pointer;
	static int INF = 100000000;
	
	static int[] dir1 = {0, 1, 0, -1};
	static int[] dir2 = {1, 0, -1, 0};
	
	static class pos{
		int x, y;
		int dir;
		public pos(int x, int y) {
			this.x = x;
			this.y = y;
		}
		public pos(int x, int y, int dir) {
			this.x = x;
			this.y = y;
			this.dir = dir;
		}
	}
	
	public static void bfs() {
		Queue<pos> queue = new LinkedList<>();
		queue.add(new pos(pointer[0].x, pointer[0].y, -1));
		count[pointer[0].x][pointer[0].y] = 1;
		
		while(!queue.isEmpty()) {
			pos cur = queue.remove();
			
			for(int i=0; i<4; i++) {
				int nextX = cur.x + dir1[i];
				int nextY = cur.y + dir2[i];
				
				if(nextX>=0&&nextY>=0&&nextX<h&&nextY<w && map[nextX][nextY]!='*' && count[nextX][nextY] >= count[cur.x][cur.y]+1) {
					if(i != cur.dir)
						count[nextX][nextY] = count[cur.x][cur.y] + 1;
					else
						count[nextX][nextY] = count[cur.x][cur.y];
					queue.add(new pos(nextX, nextY, i));
					
					if(map[nextX][nextY]=='C' && pointer[1].x==nextX && pointer[1].y==nextY) {
						return;
					}
				}
			}
		}
	}
	
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		w = s.nextInt();
		h = s.nextInt();
		map = new char[h][w];
		count = new int[h][w];
		pointer = new pos[2];
		int tmp = 0;
		
		s.nextLine();
		for(int i=0; i<h; i++) {
			String input = s.nextLine();
			for(int j=0; j<w; j++) {
				map[i][j] = input.charAt(j);
				if(map[i][j] == 'C') {
					pointer[tmp++] = new pos(i, j);
				}
			}
		}
		
		for(int i=0; i<2; i++)
			System.out.println(pointer[i].x+" "+pointer[i].y);
		
		for(int i=0; i<h; i++)
			Arrays.fill(count[i], INF);
		bfs();
		
		for(int i=0; i<h; i++) {
			for(int j=0; j<w; j++)
				System.out.print(count[i][j]+" ");
			System.out.println();
		}
		System.out.println(count[pointer[1].x][pointer[1].y]-2);
	}
}
