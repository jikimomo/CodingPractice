import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	static int n, m;
	static int[][] map;
	static int[][][] count;
	
	static int[] dir1 = {0, 1, 0, -1};
	static int[] dir2 = {1, 0, -1, 0};
	
	static class node{
		int x, y, sword;
		public node(int x, int y, int sword) {
			this.x = x;
			this.y = y;
			this.sword = sword;
		}
	}
	
	public static void solution() {
		Queue<node> queue = new LinkedList<>();
		queue.add(new node(0, 0, 0));
		count[0][0][0] = 0;
		
		while(!queue.isEmpty()) {
			node cur = queue.remove();
			
			for(int i=0; i<4; i++) {
				int nextX = cur.x + dir1[i];
				int nextY = cur.y + dir2[i];
				
				if(nextX>=0&&nextY>=0&&nextX<n&&nextY<m) {
					if(map[nextX][nextY]==0 && count[nextX][nextY][cur.sword]==0) {
						count[nextX][nextY][cur.sword] = count[cur.x][cur.y][cur.sword] + 1;
						queue.add(new node(nextX, nextY, cur.sword));
					}
					else if(map[nextX][nextY]==2 && cur.sword==0 && count[nextX][nextY][cur.sword+1]==0){
						count[nextX][nextY][cur.sword+1] = count[cur.x][cur.y][cur.sword] + 1;
						queue.add(new node(nextX, nextY, cur.sword+1));
					}
					else if(map[nextX][nextY]==1 && cur.sword==1 && count[nextX][nextY][cur.sword]==0) {
						count[nextX][nextY][cur.sword] = count[cur.x][cur.y][cur.sword] + 1;
						queue.add(new node(nextX, nextY, cur.sword));
					}
				}
			}
		}
	}

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		n = s.nextInt();
		m = s.nextInt();
		int t = s.nextInt();
		
		map = new int[n][m];
		count = new int[n][m][2];
		for(int i=0; i<n; i++) {
			for(int j=0; j<m; j++) {
				map[i][j] = s.nextInt();
			}
		}
		
		solution();
		
		if(count[n-1][m-1][0]==0 && count[n-1][m-1][1]==0)
			System.out.println("Fail");
		else if(count[n-1][m-1][0]!=0 && count[n-1][m-1][1]==0){
			if(count[n-1][m-1][0] <= t)
				System.out.println(count[n-1][m-1][0]);
			else
				System.out.println("Fail");
		}
		else if(count[n-1][m-1][0]==0 && count[n-1][m-1][1]!=0) {
			if(count[n-1][m-1][1] <= t)
				System.out.println(count[n-1][m-1][1]);
			else
				System.out.println("Fail");
		}
		else {
			int min = Math.min(count[n-1][m-1][0], count[n-1][m-1][1]);
			if(min <= t)
				System.out.println(min);
			else
				System.out.println("Fail");
		}
	}
}
