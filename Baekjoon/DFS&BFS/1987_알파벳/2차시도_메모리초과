import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	static int r, c;
	static char[][] map;
	
	static int[] dir1 = {0, 1, 0, -1};
	static int[] dir2 = {1, 0, -1, 0};
	
	static class Node{
		int x, y, count;
		String alpha;
		public Node(int x, int y, int count, String alpha) {
			this.x = x;
			this.y = y;
			this.count = count;
			this.alpha = alpha;
		}
	}
	
	public static int solution() {
		Queue<Node> queue = new LinkedList<>();
		queue.add(new Node(0, 0, 1, Character.toString(map[0][0])));
		
		int result = 0;
		while(!queue.isEmpty()) {
			Node cur = queue.remove();
			result = Math.max(result, cur.count);
			
			for(int i=0; i<4; i++) {
				int nextX = cur.x + dir1[i];
				int nextY = cur.y + dir2[i];

				if(nextX>=0 && nextY>=0 && nextX<r && nextY<c) {
					boolean flag = true;
					for(int j=0; j<cur.alpha.length(); j++) {
						if(cur.alpha.charAt(j) == map[nextX][nextY]) {
							flag = false;
							break;
						}
					}
					if(flag) {
						queue.add(new Node(nextX, nextY, cur.count+1, cur.alpha+map[nextX][nextY]));
					}
				}
			}
		}
		return result;
	}

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		r = s.nextInt();
		c = s.nextInt();
		s.nextLine();
		
		map = new char[r][c];
		for(int i=0; i<r; i++) {
			String input = s.nextLine();
			for(int j=0; j<c; j++) {
				map[i][j] = input.charAt(j);
			}
		}
		
		System.out.println(solution());
	}
}
