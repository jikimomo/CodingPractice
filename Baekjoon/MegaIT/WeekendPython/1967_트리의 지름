import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	static int n;
	static LinkedList<pos>[] tree;
	
	static class pos{
		int node, weight;
		public pos(int node, int weight) {
			this.node = node;
			this.weight = weight;
		}
	}
	
	public static int[] findDiameter(int start) {
		Queue<Integer> queue = new LinkedList<>();
		int[] dis = new int[n+1];
		boolean[] check = new boolean[n+1];
		
		check[start] = true;
		queue.add(start);
		
		while(!queue.isEmpty()) {
			int cur = queue.remove();
			
			for(int i=0; i<tree[cur].size(); i++) {
				int node = tree[cur].get(i).node;
				int weight = tree[cur].get(i).weight;
				if(!check[node]) {
					check[node] = true;
					queue.add(node);
					dis[node] = dis[cur] + weight;
				}
			}
		}
		return dis;
	}

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		n = s.nextInt();
		tree = new LinkedList[n+1];
		for(int i=0; i<=n; i++)
			tree[i] = new LinkedList<>();
		
		for(int i=0; i<n-1; i++) {
			int a = s.nextInt();
			int b = s.nextInt();
			int weight = s.nextInt();
			tree[a].add(new pos(b, weight));
			tree[b].add(new pos(a, weight));
		}
		
		int[] distance = findDiameter(1);
		int ind = 1;
		for(int i=2; i<=n; i++) {
			if(distance[i] > distance[ind])
				ind = i;
		}
		distance = findDiameter(ind);
		
		int result = distance[0];
		for(int i=1; i<=n; i++) {
			if(result < distance[i])
				result = distance[i];
		}
		System.out.println(result);
	}
}
