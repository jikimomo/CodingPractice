import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	static class Node{
		int start;
		int end;
		int time;
		public Node(int start, int end, int time) {
			this.start = start;
			this.end = end;
			this.time = time;
		}
	}
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		
		Node[] city = new Node[m];
		for(int i=0; i<m; i++) {
			st = new StringTokenizer(br.readLine());
			int s = Integer.parseInt(st.nextToken());
			int e = Integer.parseInt(st.nextToken());
			int t = Integer.parseInt(st.nextToken());
			city[i] = new Node(s, e, t);
		}
		
		long[] dist = new long[n+1];
		Arrays.fill(dist, Integer.MAX_VALUE);
		dist[1] = 0;
		for(int i=1; i<n; i++) {
			for(int j=0; j<m; j++) {
				Node node = city[j];
				if(dist[node.start]!=Integer.MAX_VALUE && dist[node.end]>dist[node.start]+node.time) 
					dist[node.end] = dist[node.start]+node.time;
			}
		}
		boolean negative_cycle = false;
		for(int i=0; i<m; i++) {
			if(dist[city[i].start]!=Integer.MAX_VALUE && dist[city[i].end]>dist[city[i].start]+city[i].time)
				negative_cycle = true;
		}
		
		if(negative_cycle)
			bw.write("-1\n");
		else {
			for(int i=2; i<=n; i++) {
				if(dist[i] == Integer.MAX_VALUE)
					bw.write("-1\n");
				else
					bw.write(dist[i]+"\n");
			}
		}
		bw.flush();
		bw.close();
		br.close();
	}
}
