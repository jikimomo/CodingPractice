import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;

public class Main {
	static int n, k;
	static int[] check;
	static int[] parent;
	static int answer = 0;
	
	public static void bfs() {
		Queue<Integer> queue = new LinkedList<>();
		queue.add(n);
		check[n] = 1;
		
		while(!queue.isEmpty()) {
			int cur = queue.remove();
			if(cur == k) {
				answer = check[cur] - 1;
				return;
			}
			
			if(cur-1>=0 && check[cur-1]==0) {
				queue.add(cur-1);
				check[cur-1] = check[cur] + 1;
				parent[cur-1] = cur;
			}
			if(cur+1<=100000 && check[cur+1]==0) {
				queue.add(cur+1);
				check[cur+1] = check[cur] + 1;
				parent[cur+1] = cur;
			}
			if(cur*2<=100000 && check[cur*2]==0) {
				queue.add(cur*2);
				check[cur*2] = check[cur] + 1;
				parent[cur*2] = cur;
			}
		}
	}
	
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		n = s.nextInt();
		k = s.nextInt();
		check = new int[100001];
		parent = new int[100001];
		
		bfs();
		
		Stack<Integer> stack = new Stack<>();
		stack.push(k);
		int index = k;
		
		while(index != n) {
			stack.push(parent[index]);
			index = parent[index];
		}
		
		StringBuilder sb = new StringBuilder();
		while(!stack.isEmpty()) {
			sb.append(stack.pop()+" ");
		}
		System.out.println(answer);
		System.out.println(sb);
	}
}
