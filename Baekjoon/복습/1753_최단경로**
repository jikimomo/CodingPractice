import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	static int v, e;
	static ArrayList<node>[] tree;
	static int[] dist;
	static int INF = 100000000;
	
	static class node implements Comparable<node>{
		int end, weight;
		public node(int end, int weight) {
			this.end = end;
			this.weight = weight;
		}
		
		@Override
		public int compareTo(node n) {
			return this.weight - n.weight;
		}
	}

	public static void dijkstra(int start) {
		PriorityQueue<node> queue = new PriorityQueue<>();
		boolean[] check = new boolean[v+1];
		queue.add(new node(start, 0));
		dist[start] = 0;
		
		while(!queue.isEmpty()) {
			node curNode = queue.remove();
			
			if(!check[curNode.end]) {
				check[curNode.end] = true;
				
				for(int i=0; i<tree[curNode.end].size(); i++) {
					node next = tree[curNode.end].get(i);
					if(dist[next.end] > dist[curNode.end]+next.weight) {
						dist[next.end] = dist[curNode.end] + next.weight;
						queue.add(new node(next.end, dist[next.end]));
					}
				}
			}
		}
	}
	
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		v = Integer.parseInt(st.nextToken());
		e = Integer.parseInt(st.nextToken());
		int k = Integer.parseInt(br.readLine());
		
		tree = new ArrayList[v+1];
		for(int i=0; i<=v; i++)
			tree[i] = new ArrayList<>();
		for(int i=0; i<e; i++) {
			st = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(st.nextToken());
			int end = Integer.parseInt(st.nextToken());
			int weight = Integer.parseInt(st.nextToken());
			
			tree[start].add(new node(end, weight));
		}
		dist = new int[v+1];
		Arrays.fill(dist, INF);
		
		dijkstra(k);
		
		for(int i=1; i<=v; i++) {
			if(dist[i] == INF)
				System.out.println("INF");
			else
				System.out.println(dist[i]);
		}
	}
}
