import java.util.*;

class Solution {
    static char[] op = {'*', '+', '-'};
    static boolean[] check = new boolean[3];
    static int[] order = new int[3];
    static long answer = 0;
    
    static ArrayList<Long> numList;
    static ArrayList<Character> opList;
    
    public void calculate(){
        ArrayList<Long> number = new ArrayList<>();
        for(int i=0; i<numList.size(); i++){
            number.add(numList.get(i));
        }
        ArrayList<Character> operator = new ArrayList<>();
        for(int i=0; i<opList.size(); i++){
            operator.add(opList.get(i));
        }

        for(int i=0; i<3; i++){
            Character curOp = op[order[i]];
            
            for(int j=0; j<operator.size(); j++){
                if(curOp == operator.get(j)){
                    operator.remove(j);
                    long a = number.remove(j);
                    long b = number.remove(j);
                    
                    if(curOp == '*'){
                        number.add(j, a*b);
                    }
                    else if(curOp == '+'){
                        number.add(j, a+b);
                    }
                    else if(curOp == '-'){
                        number.add(j, a-b);
                    }
                    j--;
                }
            }
        }
        answer = Math.max(answer, Math.abs(number.get(0)));
    }
    
    public void back(int depth){
        if(depth == 3){
            calculate();
            return;
        }
        for(int i=0; i<3; i++){
            if(!check[i]){
                check[i] = true;
                order[depth] = i;
                back(depth+1);
                check[i] = false;
            }
        }
    }
    
    public long solution(String expression) {
        String tmp = new String();
        numList = new ArrayList<>();
        opList = new ArrayList<>();
        for(int i=0; i<expression.length(); i++){
            if(expression.charAt(i)!='+' && expression.charAt(i)!='-' && expression.charAt(i)!='*'){
                tmp += expression.charAt(i);
            }
            else{
                opList.add(expression.charAt(i));
                numList.add(Long.parseLong(tmp));
                tmp = new String();
            }
        }
        numList.add(Long.parseLong(tmp));
        
        back(0);
        
        return answer;
    }
}
