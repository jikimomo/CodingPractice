import java.util.*;

class Solution {
    // ():1, []:2, {}:3
    public boolean check(String str){
        Stack<Integer> stack = new Stack<>();
        boolean flag = true;
        int i=0;
        
        for(i=0; i<str.length(); i++){
            if(str.charAt(i) == '(')
                stack.add(1);
            else if(str.charAt(i) == '[')
                stack.add(2);
            else if(str.charAt(i) == '{')
                stack.add(3);
            else if(str.charAt(i) == ')'){
                if(stack.isEmpty() || stack.pop() != 1){
                    flag = false;
                    break;
                }
            }
            else if(str.charAt(i) == ']'){
                if(stack.isEmpty() || stack.pop() != 2){
                    flag = false;
                    break;
                }
            }
            else if(str.charAt(i) == '}'){
                if(stack.isEmpty() || stack.pop() != 3){
                    flag = false;
                    break;
                }
            }
        }
        if(i == str.length() && !stack.isEmpty())
            flag = false;
        
        return flag;
    }
    
    public int solution(String s) {
        int answer = 0;
        int sLen = s.length();
        
        for(int i=0; i<sLen; i++){
            if(check(s))
                answer++;
            s = s+s.charAt(0);
            s = s.substring(1, sLen+1);
        }
        
        return answer;
    }
}
