import java.util.*;

class Solution {
    public int[] solution(int rows, int columns, int[][] queries) {
        int[] answer = new int[queries.length];
        
        int value = 1;
        int[][] map = new int[rows][columns];
        for(int i=0; i<rows; i++){
            for(int j=0; j<columns; j++){
                map[i][j] = value++;
            }
        }
        
        for(int i=0; i<queries.length; i++){
            int startX = queries[i][0] - 1;
            int startY = queries[i][1] - 1;
            int endX = queries[i][2] - 1;
            int endY = queries[i][3] - 1;
            
            int startNum = map[startX][startY];
            int minNum = rows * columns + 1;
            
            //bottom -> up
            for(int j=startX+1; j<=endX; j++){
                map[j-1][startY] = map[j][startY];
                minNum = Math.min(minNum, map[j-1][startY]);
            }
            
            //right -> left
            for(int j=startY+1; j<=endY; j++){
                map[endX][j-1] = map[endX][j];
                minNum = Math.min(minNum, map[endX][j-1]);
            }
            
            //top -> down
            for(int j=endX-1; j>=startX; j--){
                map[j+1][endY] = map[j][endY];
                minNum = Math.min(minNum, map[j+1][endY]);
            }
            
            //left -> right
            for(int j=endY-1; j>=startY; j--){
                map[startX][j+1] = map[startX][j];
                minNum = Math.min(minNum, map[startX][j+1]);
            }
            
            map[startX][startY+1] = startNum;
            minNum = Math.min(minNum, map[startX][startY+1]);
            answer[i] = minNum;
        }
        
        return answer;
    }
}
