import java.util.*;

class Solution {
    public class Node implements Comparable<Node>{
        int index;
        double rfail;
        public Node(int index, double rfail){
            this.index = index;
            this.rfail = rfail;
        }
        
        @Override
        public int compareTo(Node n){
            if(this.rfail == n.rfail){
                return this.index - n.index;
            }
            else if(this.rfail < n.rfail){
                return 1;
            }
            else{
                return -1;
            }
        }
    }
    public int[] solution(int N, int[] stages) {
        int[] fail = new int[N+1];
        int[] access = new int[N+1];
        
        for(int i=0; i<stages.length; i++){
            for(int j=1; j<stages[i]; j++){
                access[j]++;
            }
            if(stages[i]<=N){
                access[stages[i]]++;
                fail[stages[i]]++;
            }
        }
        double[] rate = new double[N+1];
        ArrayList<Node> rank = new ArrayList<>();
        for(int i=1; i<=N; i++){
            if(fail[i] == 0 && access[i] == 0){
                rate[i] = 0.0;
            }
            else{
                rate[i] = (double)fail[i] / access[i];
            }
            rank.add(new Node(i, rate[i]));
        }
        Collections.sort(rank);
        
        int[] answer = new int[N];
        for(int i=0; i<N; i++){
            answer[i] = rank.get(i).index;
        }
        return answer;
    }
}
